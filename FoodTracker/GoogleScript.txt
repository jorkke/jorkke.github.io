///*
// *  SW for the Google-script of the Arduino-based FoodTracker, written by Jorma Kuha. 
// *  For more information, please go to http://jorkke.github.io
// *  
// *  Version history: 
// *  January 31, 2021: First release.
//
//Copyright (c) 2021 Jorma Kuha
//
//Permission is hereby granted, free of charge, to any person obtaining a copy
//of this software and associated documentation files (the "Software"), to deal
//in the Software without restriction, including without limitation the rights
//to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//copies of the Software, and to permit persons to whom the Software is
//furnished to do so, subject to the following conditions:
//
//The above copyright notice and this permission notice shall be included in all
//copies or substantial portions of the Software.
//
//THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
//OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
//SOFTWARE.
// * 
// */

// Inspired by;  https://www.reddit.com/r/arduino/comments/9zsmlv/super_easy_cloud_data_logging_with_google_sheets/
// and: http://esp32-server.de/google-sheets/?fbclid=IwAR2wGArRBaJ7YcHkVmJkEzTxiCxU443Q7cUroPHu2L7KBjntPm8m0HyjfoY

// insert your spreadsheet ID here:
var ssId = "https://docs.google.com/spreadsheets/d/<... INSERT YOUR SPREADSHEET ID HERE...>/edit#gid=0";

function doGet(e){
  var ss = SpreadsheetApp.openByUrl(ssId);
  var i = 0;
  var returnValue = "";
  var catched = false; // waw a exception thrown and catched
  
  // get the parameter(s) for specific queries and set the default to "<missing>"
  var storeCode = e.parameter.Code || "<missing>";
  var storeAmount_g = e.parameter.Amount_g || "<missing>";  
  var deleteFirstRow = e.parameter.DeleteFirstRow || "<missing>";
  var getCodesWithServings = e.parameter.GetCodesWithServings || "<missing>";
  var storeCalibrationValue = e.parameter.StoreCalibrationValue || "<missing>";
  var getTodaysKcal = e.parameter.GetTodaysKcal || "<missing>";
  
  var lock = LockService.getScriptLock();
  try
  {
      // locking the spreadsheet as shown in: https://stackoverflow.com/questions/43223774/how-to-understand-lockservice-and-implement-it-correctly 
      // otherwise, if for example the user entered a long macro-based food item first, the control is returned back to Arduino even
      // while the execution of the macro continues here, and if the user then presses another food item, we may have a concurrent
      // write-access to the spreadsheet, which may result into problems like lost food items, empty rows added etc. 
      try 
      {
          lock.waitLock(90000); // wait max 90 seconds for others' use of the code section and lock to stop and then proceed
      } 
      catch (e) 
      {
          Logger.log('Could not obtain lock after 90 seconds.');
          returnValue = "Error: Server busy try again later... Sorry :(";
          return returnValue;
      }
      // note:  if return is run in the catch block above the following will not run as the function will be exited                            
    
      if (storeCode != "<missing>")  
      {   
          if (storeAmount_g != "<missing>")
          {    
              returnValue= addRowToSheet( storeCode, storeAmount_g);      
          }
          else
          {
              returnValue = "Error: Amount_g missing although Code given!";
          }
      }  
      else if (deleteFirstRow != "<missing>")  
      {
          // delete first row     
          ss.deleteRow(2)    
          returnValue =  "OK!";
      }   
      else if (getCodesWithServings != "<missing>")
      {
          // returns the codes in a ";" -separated list along with the default serving sizes, which can be used without measuring the weight (because a default serving size has been defined)    
          var nutrientSheet = ss.getSheetByName('Nutrients');
          var lastNutrientRow = nutrientSheet.getLastRow();
          returnValue = "";  
          for (i=2; i<= lastNutrientRow; i++)
          {
            if ( !(nutrientSheet.getRange(i, 3).isBlank())) 
            {
              returnValue = returnValue + nutrientSheet.getRange(i,1).getValue() + "=" +   nutrientSheet.getRange(i,3).getValue() + ";";
            }
          }       
      }
      else if (storeCalibrationValue != "<missing>")
      {
          var nutrientSheet = ss.getSheetByName('Nutrients');
          nutrientSheet.getRange(152, 3).setValue( storeCalibrationValue); 
          // 152 is the row of the CALIBRATION FACTOR and 3 is the column of its value
          returnValue = "OK!";
      }
      else if (getTodaysKcal != "<missing>")
      {
          // just todays kcal
         
          var rawDataSheet = ss.getSheets()[0];
          var lastDataRow = rawDataSheet.getLastRow();
          var latestTimestamp = new Date(rawDataSheet.getRange(2, 1).getValue());
          var latestDate = latestTimestamp.getDate();
          var latestDay = latestTimestamp.getDay();
          var latestMonth = latestTimestamp.getMonth();
          var latestYear = latestTimestamp.getYear();
    
          var daySum = 0;
    
          returnValue = "";  

          for (i=2; i<= lastDataRow; i++)
          {
            var tempDate = new Date(rawDataSheet.getRange(i, 1).getValue());
            var readDate = tempDate.getDate();
            var readMonth = tempDate.getMonth();
            var readYear = tempDate.getYear();
        
            if ((readDate  == latestDate) && (readMonth==latestMonth) && (readYear == latestYear))  
            {
               daySum +=  rawDataSheet.getRange(i,5).getValue() ;    
            }
            else 
            {
              break;
            }
        }  
        returnValue =  Math.round(daySum);
      }  // of if
  } // of try
  catch (err)
  {
      catched = true;
      returnValue = err.name + "\n" + err.message + "\n" + err.stack;
      // write (or try to write) the error message to the ErrorLog-sheet.activate
      addErrorMsgToErrorLogSheet( returnValue);       
  }    
  finally
  {
      SpreadsheetApp.flush(); // applies all pending spreadsheet changes
      lock.releaseLock();      
    
      if ((! catched) &&  returnValue.toString().includes("Error"))
      // this is needed because we are not throwing exceptions on errors detected by this script itself
      {
          addErrorMsgToErrorLogSheet( returnValue);            
      }
      return ContentService.createTextOutput(logOutput(returnValue)) ;
  }
}

function addRowToSheet(foodCode, foodGrams)
{
  var ss = SpreadsheetApp.openByUrl(ssId)
  var rawDataSheet = ss.getSheetByName('RawData');

  //get column labels (row 1 values)
  var headerVals = rawDataSheet.getRange(1,1,1,rawDataSheet.getLastColumn()).getValues();
  //create correct length array for new row values by cloning headerVals[]
  var newRowVals = headerVals[0].slice(0);

  // make the first column on the first row (not counting the column names) to always contain the timestamp
  newRowVals[0] = new Date();
  newRowVals[1] = foodCode;
  newRowVals[2] = foodGrams;
  
  
  // fill in the rest of the cells.
  // first we need to find out the right row number in the Nutrients-sheet for this substance:
  
  var nutrientSheet = ss.getSheetByName('Nutrients');
  var lastNutrientRow = nutrientSheet.getLastRow();
  var correctSubstanceRow = -1;
  var i = 0;
  for (i=1; i<= lastNutrientRow; i++)
  {
    if (nutrientSheet.getRange(i, 1).getValue() == foodCode) // the nutrient code is always in the second column on the raw data
    {
      correctSubstanceRow = i;
      break;
    }
  }
  if (correctSubstanceRow == -1)
  {
    return "Error: no food code like this defined!" + foodCode + " " + foodGrams;
  }
   
  // First we check if this is a "macro" - if it is, it is handled differently - by recursively calling this same function

 
  if (nutrientSheet.getRange(correctSubstanceRow, 11).isBlank())
  {
    //////////////////////////////////
    // not a macro, business as usual:
    //////////////////////////////////
  
    // Name: 
    newRowVals[3] = nutrientSheet.getRange(correctSubstanceRow, 2).getValue();
  
    // Energy kcal:
    newRowVals[4] = nutrientSheet.getRange(correctSubstanceRow, 4).getValue() *newRowVals[2] / 100; // newRowVals[2]: Amount served in grams
    if (newRowVals[2] == 0)
    {
      return "Error: no weight given!";
    };
  
    // Fluid litres:
    newRowVals[5] = nutrientSheet.getRange(correctSubstanceRow, 5).getValue() *newRowVals[2] / 1000; // newRowVals[2]: Amount served in grams, multiplied with fluid percengage, converted to litres
  
    // Fat g:
    newRowVals[6] = nutrientSheet.getRange(correctSubstanceRow, 6).getValue() *newRowVals[2] / 100; // newRowVals[2]: Amount served in grams, 
  
    // Carbs g:
    newRowVals[7] = nutrientSheet.getRange(correctSubstanceRow, 7).getValue() *newRowVals[2] / 100; // newRowVals[2]: Amount served in grams, 
  
    // Protein g:
    newRowVals[8] = nutrientSheet.getRange(correctSubstanceRow, 8).getValue() *newRowVals[2] / 100; // newRowVals[2]: Amount served in grams, 
  
    // Salt g:
    newRowVals[9] = nutrientSheet.getRange(correctSubstanceRow, 9).getValue() *newRowVals[2] / 100; // newRowVals[2]: Amount served in grams, 
  
 
    //add new (blank) row to spreadsheet after the header row, then populate row with new data
    rawDataSheet.insertRowAfter(1);
    var insertRange = rawDataSheet.getRange(2,1,1,newRowVals.length);
    var insertValues = [newRowVals];
    insertRange.setValues(insertValues);
  
    
    return "OK!";  
  }
  else
  {
    /////////////////////////////////////////////////////////////////////////////
    // this is a macro, so handle it by reading the the macro elements one by one 
    /////////////////////////////////////////////////////////////////////////////
    
    var i = 0; // must be "var" !
    while (!(nutrientSheet.getRange(correctSubstanceRow, 11+i).isBlank()))
    {
        returnValue = addRowToSheet(nutrientSheet.getRange(correctSubstanceRow, 11+i).getValue(),nutrientSheet.getRange(correctSubstanceRow, 12+i).getValue());
        if (returnValue == "OK!")
        {
            i = i +2;            
        }
        else
        {
          return returnValue;
        }
    }    
  }    
  return "OK!";
};

function addErrorMsgToErrorLogSheet( errorMessage)
{
  var ss = SpreadsheetApp.openByUrl(ssId)
  var errorLogSheet = ss.getSheetByName('ErrorLog');

  //get column labels (row 1 values)
  var headerVals = errorLogSheet.getRange(1,1,1,errorLogSheet.getLastColumn()).getValues();
  //create correct length array for new row values by cloning headerVals[]
  var newRowVals = headerVals[0].slice(0);

  // make the first column on the first row (not counting the column names) to always contain the timestamp
  newRowVals[0] = new Date();
  newRowVals[1] = errorMessage;
    
  //add new (blank) row to spreadsheet after the header row, then populate row with new data
  errorLogSheet.insertRowAfter(1);
  var insertRange = errorLogSheet.getRange(2,1,1,newRowVals.length);
  var insertValues = [newRowVals];
  insertRange.setValues(insertValues);
  
  return "OK!";  
};


function logOutput( message )
{
  Logger.log(message);
  return message;
}
